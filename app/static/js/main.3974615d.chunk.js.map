{"version":3,"sources":["logo.svg","components/NavBox.js","components/Main/InputBox.js","actions/changeSymbolType.js","actions/changeCodeString.js","components/Main/ViewBox.js","components/Main/Layout.js","App.js","reducers/symbolTypeReducer.js","reducers/codeStringReducer.js","reducers/rootReducer.js","configureStore.js","serviceWorker.js","index.js"],"names":["module","exports","NavBox","props","state","color","className","Brand","Item","React","Component","InputBox","handleChangeSymbolType","bind","handleChangeString","symbolType","localStorage","getItem","this","changeSymbolType","e","target","value","setItem","changeCodeString","Column","Field","Label","Control","Select","onChange","Input","placeholder","codeString","connect","dispatch","type","payload","str","ViewBox","bwipjs","bcid","text","scale","includetext","textxalign","id","Layout","App","style","height","exact","path","render","symbolTypeReducer","action","codeStringReducer","createRootReducer","history","combineReducers","router","connectRouter","createBrowserHistory","Boolean","window","location","hostname","match","preloadedState","store","createStore","compose","applyMiddleware","routerMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3974615d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport { Navbar } from 'react-bulma-components/full'\r\n\r\nclass NavBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Navbar color=\"grey-darker\" className=\"has-background-grey\">\r\n                <Navbar.Brand>\r\n                    <Navbar.Item className=\"has-text-white\">\r\n                        <div>CodeSymbolGenerator</div>\r\n                    </Navbar.Item>\r\n                </Navbar.Brand>\r\n            </Navbar>\r\n        )\r\n    }\r\n}\r\nexport default NavBox","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Columns, Form } from 'react-bulma-components/full'\r\nimport { changeSymbolType } from '../../actions/changeSymbolType'\r\nimport { changeCodeString } from '../../actions/changeCodeString'\r\n\r\nclass InputBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n\r\n        this.handleChangeSymbolType = this.handleChangeSymbolType.bind(this)\r\n        this.handleChangeString = this.handleChangeString.bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        var symbolType = localStorage.getItem(\"SymbolType\")\r\n        if (symbolType != null) {\r\n            this.props.changeSymbolType(symbolType)\r\n        }\r\n    }\r\n\r\n    handleChangeSymbolType(e) {\r\n        this.props.changeSymbolType(e.target.value)\r\n        localStorage.setItem(\"SymbolType\", e.target.value)\r\n    }\r\n\r\n    handleChangeString(e) {\r\n        this.props.changeCodeString(e.target.value)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Columns.Column>\r\n                <Form.Field>\r\n                    <Form.Label>Symbol</Form.Label>\r\n                    <Form.Control>\r\n                        <Form.Select value={this.props.symbolType} onChange={this.handleChangeSymbolType}>\r\n                            <option value=\"code128\">Code128</option>\r\n                            <option value=\"qrcode\">QRCode</option>\r\n                            <option value=\"datamatrix\">DataMatrix</option>\r\n                        </Form.Select>\r\n                    </Form.Control>\r\n                </Form.Field>\r\n                <Form.Field>\r\n                    <Form.Label>Symbol Value</Form.Label>\r\n                    <Form.Control>\r\n                        <Form.Input placeholder=\"input the symbol value.\" value={this.props.codeString} onChange={this.handleChangeString}></Form.Input>\r\n                    </Form.Control>\r\n                </Form.Field>\r\n            </Columns.Column>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    symbolType: state.symbolType,\r\n    codeString: state.codeString,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    changeSymbolType: ((type) => {\r\n        dispatch(changeSymbolType(type))\r\n    }),\r\n    changeCodeString: (str) => dispatch(changeCodeString(str))\r\n})\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputBox)","export const changeSymbolType = (type) => ({\r\n    type: 'CHANGE_SYMBOLTYPE',\r\n    payload: type\r\n})","export const changeCodeString = (str) => ({\r\n    type: 'CHANGE_CODESTRING',\r\n    payload: str \r\n})","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport bwipjs from 'bwip-js'\r\nimport { Columns } from 'react-bulma-components/full'\r\n\r\nclass ViewBox extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        bwipjs('symbol', {\r\n            bcid:        this.props.symbolType,       // Barcode type\r\n            text:        this.props.codeString,    // Text to encode\r\n            scale:       2,               // 3x scaling factor\r\n            includetext: true,            // Show human-readable text\r\n            textxalign:  'center',        // Always good to set this\r\n\r\n        }, () => {\r\n\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Columns.Column>\r\n                <canvas id=\"symbol\"></canvas>\r\n            </Columns.Column>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    symbolType: state.symbolType,\r\n    codeString: state.codeString,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ViewBox)","import React from 'react'\r\nimport { Container, Columns, Section } from 'react-bulma-components/full'\r\n\r\nimport InputBox from './InputBox'\r\nimport ViewBox from './ViewBox'\r\n\r\nclass Layout extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Section className=\"has-background-grey-light\">\r\n                <Container>\r\n                    <Columns>\r\n                        <InputBox />\r\n                        <ViewBox />\r\n                    </Columns>\r\n                </Container>\r\n            </Section>\r\n        )\r\n    }\r\n}\r\nexport default Layout","import React from 'react';\nimport { Route, Switch } from 'react-router'\nimport logo from './logo.svg';\nimport './App.css';\nimport NavBox from './components/NavBox'\nimport { default as Main } from './components/Main/Layout'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div style={{height: '100%'}}>\n        <NavBox />\n        <Switch>\n          <Route exact path=\"/\" render={() => (\n            <Main />\n          )} />\n          <Route render={() => (\n            <Main />\n          )} />\n        </Switch>\n      </div>\n    )\n  }\n}\n/*\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\n\nexport default App;\n","const symbolTypeReducer = (state = \"\", action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE_SYMBOLTYPE':\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default symbolTypeReducer","const codeStringReducer = (state = \"\", action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE_CODESTRING':\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default codeStringReducer","import { combineReducers } from 'redux'\r\nimport { connectRouter } from 'connected-react-router'\r\nimport symbolTypeReducer from './symbolTypeReducer';\r\nimport codeStringReducer from './codeStringReducer';\r\n\r\nconst createRootReducer = (history) => combineReducers({\r\n    symbolType: symbolTypeReducer,\r\n    codeString: codeStringReducer,\r\n    router: connectRouter(history)\r\n})\r\nexport default createRootReducer","import { createStore, applyMiddleware, compose } from 'redux'\r\nimport { createBrowserHistory } from 'history'\r\nimport { routerMiddleware } from 'connected-react-router'\r\nimport createRootReducer from './reducers/rootReducer'\r\n\r\nexport const history = createBrowserHistory()\r\n\r\nexport default function configureStore(preloadedState) {\r\n    return createStore(\r\n        createRootReducer(history),\r\n        preloadedState,\r\n        compose (\r\n            applyMiddleware (\r\n                routerMiddleware(history),\r\n            )\r\n        )\r\n    )\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport './index.css';\nimport App from './App';\nimport configureStore, { history } from './configureStore'\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore()\n\nReactDOM.render(\n    <Provider store={store}>\n        <ConnectedRouter history={history}>\n            <App />\n        </ConnectedRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}